'Object' class
==============
-Objects are variables that can contain many values inside it.
-Collection of properties & values. 
   ex: {prop1:val1,prop2:val2}
-Object properties are written in 'key:value' pairs. 
  ex: let user = {name:'sachin' , age:35, add:'mumbai'}
-we can access object properties in two ways:
	objectName.propertyName;       user.name;
	objectName["propertyName"];    user['age'];
-4 ways to create javascript object
   1. Object Literal    ex: var obj1 = {};
   2. Object create()   ex: var obj2 = Object.create({});
   3. Object Class	    ex: var obj3 = new Object();
   4. Using Class		ex: var obj4 = new Employee();
-How to get the length of the object
	Object.keys(obj).length;
	
-How to check if a property exists in an object
 console.log(propertyName in obj)   (also includes prototype properties)
 obj.hasOwnProperty(propertyName)   (doesn't includes prototype properties)
 
-Object class static functions : 
	assign() - Copies properties from one or more source objects to a target object.
	create() -  creates a new object, using an existing object as the prototype of the newly created object
	freeze() - Freezes an object. neither the structure nor values can be changed. (shallow)
	isFrozen() - Determines if an object was frozen
	seal()  - structure of the object cann't be modified, value of the properties can be changed.
	isSealed() - Determines if an object is sealed.
	preventExtensions() -new properties cann't be added to an object, properties can be deleted, value of the properties can be changed
    isExtensible() - Determines if extending of an object is allowed
	keys()	- Returns an array of keys
	values() - Returns an array of values
	entries() - returns an array of [key, value] pairs
	fromEntries() - transforms an array/Map into an Object
	groupBy(items, callbackFn) - groups the data, the callbackFn should return a groupName

	
-JSON.stringify()  converts object to string.
-JSON.parse()      converts string to object.


-shallow copy : Object.assign()
                obj2 = {...obj1}
-deep cloning :  JSON.parse(JSON.stringify(obj))  
				 obj2 = structuredClone(obj1)
Note: structuredClone() cann't copy the functions from original object to copied object.

-A shallow copy of an object is a copy whose nested properties share the same references.
 (Nested objects will not be copied by value)
-A deep copy of an object is a copy whose nested properties do not share the same references.


closure  (closure scope)
================
-A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. 

-A closure is a concept where an inner function has access to its outer function's variables even after the outer function's execution is Completed/Closed.

-When an inner function accesses any data from the outer function, a 'closure' scope gets attached to the inner function.
 hence inner function can access outer function data.

-When the outer function execution completes, you’d expect all its variables to be no longer accessible. However, if the inner function uses variables from the outer function, those variables remain accessible.

-The inner function retains access to the outer function’s scope, because the inner function ‘remembers’ the environment in which it was created.